/* -*- buffer-read-only: t -*-
   !!!!!!!   DO NOT EDIT THIS FILE   !!!!!!!
   This file is built by regen_perly.pl from perly.y.
   Any changes made here will be lost!
 */

case 2:
#line 119 "perly.y"
    {
			  parser->expect = XSTATE;
                          (yyval.ival) = 0;
			;}
    break;

  case 3:
#line 124 "perly.y"
    {
			  newPROG(block_end((ps[(3) - (4)].val.ival),(ps[(4) - (4)].val.opval)));
			  PL_compiling.cop_seq = 0;
			  (yyval.ival) = 0;
			;}
    break;

  case 4:
#line 130 "perly.y"
    {
			  parser->expect = XTERM;
                          (yyval.ival) = 0;
			;}
    break;

  case 5:
#line 135 "perly.y"
    {
			  PL_eval_root = (ps[(3) - (3)].val.opval);
			  (yyval.ival) = 0;
			;}
    break;

  case 6:
#line 140 "perly.y"
    {
			  parser->expect = XBLOCK;
                          (yyval.ival) = 0;
			;}
    break;

  case 7:
#line 145 "perly.y"
    {
			  PL_pad_reset_pending = TRUE;
			  PL_eval_root = (ps[(3) - (3)].val.opval);
			  (yyval.ival) = 0;
			  yyunlex();
			  parser->yychar = yytoken = YYEOF;
			;}
    break;

  case 8:
#line 153 "perly.y"
    {
			  parser->expect = XSTATE;
                          (yyval.ival) = 0;
			;}
    break;

  case 9:
#line 158 "perly.y"
    {
			  PL_pad_reset_pending = TRUE;
			  PL_eval_root = (ps[(3) - (3)].val.opval);
			  (yyval.ival) = 0;
			  yyunlex();
			  parser->yychar = yytoken = YYEOF;
			;}
    break;

  case 10:
#line 166 "perly.y"
    {
			  parser->expect = XSTATE;
                          (yyval.ival) = 0;
			;}
    break;

  case 11:
#line 171 "perly.y"
    {
			  PL_pad_reset_pending = TRUE;
			  PL_eval_root = (ps[(3) - (3)].val.opval);
			  (yyval.ival) = 0;
			  yyunlex();
			  parser->yychar = yytoken = YYEOF;
			;}
    break;

  case 12:
#line 179 "perly.y"
    {
			  parser->expect = XSTATE;
                          (yyval.ival) = 0;
			;}
    break;

  case 13:
#line 184 "perly.y"
    {
			  PL_eval_root = (ps[(3) - (3)].val.opval);
			  (yyval.ival) = 0;
			;}
    break;

  case 14:
#line 192 "perly.y"
    { if (parser->copline > (line_t)(ps[(1) - (4)].val.ival))
			      parser->copline = (line_t)(ps[(1) - (4)].val.ival);
			  (yyval.opval) = block_end((ps[(2) - (4)].val.ival), (ps[(3) - (4)].val.opval));
			;}
    break;

  case 15:
#line 200 "perly.y"
    { if (parser->copline > (line_t)(ps[(1) - (7)].val.ival))
			      parser->copline = (line_t)(ps[(1) - (7)].val.ival);
			  (yyval.opval) = block_end((ps[(2) - (7)].val.ival), (ps[(5) - (7)].val.opval));
			;}
    break;

  case 16:
#line 207 "perly.y"
    { (yyval.ival) = block_start(TRUE);
			  parser->parsed_sub = 0; ;}
    break;

  case 17:
#line 212 "perly.y"
    { if (parser->copline > (line_t)(ps[(1) - (4)].val.ival))
			      parser->copline = (line_t)(ps[(1) - (4)].val.ival);
			  (yyval.opval) = block_end((ps[(2) - (4)].val.ival), (ps[(3) - (4)].val.opval));
			;}
    break;

  case 18:
#line 219 "perly.y"
    { (yyval.ival) = block_start(FALSE);
			  parser->parsed_sub = 0; ;}
    break;

  case 19:
#line 225 "perly.y"
    { (yyval.opval) = NULL; ;}
    break;

  case 20:
#line 227 "perly.y"
    {   (yyval.opval) = op_append_list(OP_LINESEQ, (ps[(1) - (2)].val.opval), (ps[(2) - (2)].val.opval));
			    PL_pad_reset_pending = TRUE;
			    if ((ps[(1) - (2)].val.opval) && (ps[(2) - (2)].val.opval))
				PL_hints |= HINT_BLOCK_SCOPE;
			;}
    break;

  case 21:
#line 236 "perly.y"
    { (yyval.opval) = NULL; ;}
    break;

  case 22:
#line 238 "perly.y"
    {   (yyval.opval) = op_append_list(OP_LINESEQ, (ps[(1) - (2)].val.opval), (ps[(2) - (2)].val.opval));
			    PL_pad_reset_pending = TRUE;
			    if ((ps[(1) - (2)].val.opval) && (ps[(2) - (2)].val.opval))
				PL_hints |= HINT_BLOCK_SCOPE;
			;}
    break;

  case 23:
#line 247 "perly.y"
    {
			  (yyval.opval) = (ps[(1) - (1)].val.opval) ? newSTATEOP(0, NULL, (ps[(1) - (1)].val.opval)) : NULL;
			;}
    break;

  case 24:
#line 251 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 25:
#line 255 "perly.y"
    {
                          SV *label = cSVOPx_sv((ps[(1) - (2)].val.opval));
			  (yyval.opval) = newSTATEOP(SvFLAGS(label) & SVf_UTF8,
                                            savepv(SvPVX_const(label)), (ps[(2) - (2)].val.opval));
                          op_free((ps[(1) - (2)].val.opval));
			;}
    break;

  case 26:
#line 262 "perly.y"
    {
                          SV *label = cSVOPx_sv((ps[(1) - (2)].val.opval));
			  (yyval.opval) = newSTATEOP(SvFLAGS(label) & SVf_UTF8,
                                            savepv(SvPVX_const(label)), (ps[(2) - (2)].val.opval));
                          op_free((ps[(1) - (2)].val.opval));
			;}
    break;

  case 27:
#line 272 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 28:
#line 274 "perly.y"
    {
			  CV *fmtcv = PL_compcv;
			  newFORM((ps[(2) - (4)].val.ival), (ps[(3) - (4)].val.opval), (ps[(4) - (4)].val.opval));
			  (yyval.opval) = NULL;
			  if (CvOUTSIDE(fmtcv) && !CvEVAL(CvOUTSIDE(fmtcv))) {
			      pad_add_weakref(fmtcv);
			  }
			  parser->parsed_sub = 1;
			;}
    break;

  case 29:
#line 286 "perly.y"
    {
                          init_named_cv(PL_compcv, (ps[(2) - (3)].val.opval));
			  parser->in_my = 0;
			  parser->in_my_stash = NULL;
			;}
    break;

  case 30:
#line 292 "perly.y"
    {
			  SvREFCNT_inc_simple_void(PL_compcv);
			  (ps[(2) - (7)].val.opval)->op_type == OP_CONST
			      ? newATTRSUB((ps[(3) - (7)].val.ival), (ps[(2) - (7)].val.opval), (ps[(5) - (7)].val.opval), (ps[(6) - (7)].val.opval), (ps[(7) - (7)].val.opval))
			      : newMYSUB((ps[(3) - (7)].val.ival), (ps[(2) - (7)].val.opval), (ps[(5) - (7)].val.opval), (ps[(6) - (7)].val.opval), (ps[(7) - (7)].val.opval))
			  ;
			  (yyval.opval) = NULL;
			  intro_my();
			  parser->parsed_sub = 1;
			;}
    break;

  case 31:
#line 307 "perly.y"
    {
                          init_named_cv(PL_compcv, (ps[(2) - (3)].val.opval));
			  parser->in_my = 0;
			  parser->in_my_stash = NULL;
			;}
    break;

  case 32:
#line 313 "perly.y"
    {
			  SvREFCNT_inc_simple_void(PL_compcv);
			  (ps[(2) - (6)].val.opval)->op_type == OP_CONST
			      ? newATTRSUB((ps[(3) - (6)].val.ival), (ps[(2) - (6)].val.opval), NULL, (ps[(5) - (6)].val.opval), (ps[(6) - (6)].val.opval))
			      : newMYSUB(  (ps[(3) - (6)].val.ival), (ps[(2) - (6)].val.opval), NULL, (ps[(5) - (6)].val.opval), (ps[(6) - (6)].val.opval))
			  ;
			  (yyval.opval) = NULL;
			  intro_my();
			  parser->parsed_sub = 1;
			;}
    break;

  case 33:
#line 324 "perly.y"
    {
			  package((ps[(3) - (4)].val.opval));
			  if ((ps[(2) - (4)].val.opval))
			      package_version((ps[(2) - (4)].val.opval));
			  (yyval.opval) = NULL;
			;}
    break;

  case 34:
#line 331 "perly.y"
    { CvSPECIAL_on(PL_compcv); /* It's a BEGIN {} */ ;}
    break;

  case 35:
#line 333 "perly.y"
    {
			  SvREFCNT_inc_simple_void(PL_compcv);
			  utilize((ps[(1) - (7)].val.ival), (ps[(2) - (7)].val.ival), (ps[(4) - (7)].val.opval), (ps[(5) - (7)].val.opval), (ps[(6) - (7)].val.opval));
			  parser->parsed_sub = 1;
			  (yyval.opval) = NULL;
			;}
    break;

  case 36:
#line 340 "perly.y"
    {
			  (yyval.opval) = block_end((ps[(3) - (7)].val.ival),
			      newCONDOP(0, (ps[(4) - (7)].val.opval), op_scope((ps[(6) - (7)].val.opval)), (ps[(7) - (7)].val.opval)));
			  parser->copline = (line_t)(ps[(1) - (7)].val.ival);
			;}
    break;

  case 37:
#line 346 "perly.y"
    {
			  (yyval.opval) = block_end((ps[(3) - (7)].val.ival),
                              newCONDOP(0, (ps[(4) - (7)].val.opval), (ps[(7) - (7)].val.opval), op_scope((ps[(6) - (7)].val.opval))));
			  parser->copline = (line_t)(ps[(1) - (7)].val.ival);
			;}
    break;

  case 38:
#line 352 "perly.y"
    {
			  (yyval.opval) = block_end((ps[(3) - (6)].val.ival), newGIVENOP((ps[(4) - (6)].val.opval), op_scope((ps[(6) - (6)].val.opval)), 0));
			  parser->copline = (line_t)(ps[(1) - (6)].val.ival);
			;}
    break;

  case 39:
#line 357 "perly.y"
    { (yyval.opval) = block_end((ps[(3) - (6)].val.ival), newWHENOP((ps[(4) - (6)].val.opval), op_scope((ps[(6) - (6)].val.opval)))); ;}
    break;

  case 40:
#line 359 "perly.y"
    { (yyval.opval) = newWHENOP(0, op_scope((ps[(2) - (2)].val.opval))); ;}
    break;

  case 41:
#line 361 "perly.y"
    {
			  (yyval.opval) = block_end((ps[(3) - (8)].val.ival),
				  newWHILEOP(0, 1, NULL,
				      (ps[(4) - (8)].val.opval), (ps[(7) - (8)].val.opval), (ps[(8) - (8)].val.opval), (ps[(6) - (8)].val.ival)));
			  parser->copline = (line_t)(ps[(1) - (8)].val.ival);
			;}
    break;

  case 42:
#line 368 "perly.y"
    {
			  (yyval.opval) = block_end((ps[(3) - (8)].val.ival),
				  newWHILEOP(0, 1, NULL,
				      (ps[(4) - (8)].val.opval), (ps[(7) - (8)].val.opval), (ps[(8) - (8)].val.opval), (ps[(6) - (8)].val.ival)));
			  parser->copline = (line_t)(ps[(1) - (8)].val.ival);
			;}
    break;

  case 43:
#line 375 "perly.y"
    { parser->expect = XTERM; ;}
    break;

  case 44:
#line 377 "perly.y"
    { parser->expect = XTERM; ;}
    break;

  case 45:
#line 380 "perly.y"
    {
			  OP *initop = (ps[(4) - (13)].val.opval);
			  OP *forop = newWHILEOP(0, 1, NULL,
				      scalar((ps[(7) - (13)].val.opval)), (ps[(13) - (13)].val.opval), (ps[(11) - (13)].val.opval), (ps[(10) - (13)].val.ival));
			  if (initop) {
			      forop = op_prepend_elem(OP_LINESEQ, initop,
				  op_append_elem(OP_LINESEQ,
				      newOP(OP_UNSTACK, OPf_SPECIAL),
				      forop));
			  }
			  PL_hints |= HINT_BLOCK_SCOPE;
			  (yyval.opval) = block_end((ps[(3) - (13)].val.ival), forop);
			  parser->copline = (line_t)(ps[(1) - (13)].val.ival);
			;}
    break;

  case 46:
#line 395 "perly.y"
    {
			  (yyval.opval) = block_end((ps[(3) - (9)].val.ival), newFOROP(0, (ps[(4) - (9)].val.opval), (ps[(6) - (9)].val.opval), (ps[(8) - (9)].val.opval), (ps[(9) - (9)].val.opval)));
			  parser->copline = (line_t)(ps[(1) - (9)].val.ival);
			;}
    break;

  case 47:
#line 400 "perly.y"
    {
			  (yyval.opval) = block_end((ps[(4) - (8)].val.ival), newFOROP(0,
				      op_lvalue((ps[(2) - (8)].val.opval), OP_ENTERLOOP), (ps[(5) - (8)].val.opval), (ps[(7) - (8)].val.opval), (ps[(8) - (8)].val.opval)));
			  parser->copline = (line_t)(ps[(1) - (8)].val.ival);
			;}
    break;

  case 48:
#line 406 "perly.y"
    { parser->in_my = 0; (yyval.opval) = my((ps[(4) - (4)].val.opval)); ;}
    break;

  case 49:
#line 408 "perly.y"
    {
			  (yyval.opval) = block_end(
				(ps[(3) - (10)].val.ival),
				newFOROP(0,
					 op_lvalue(
					    newUNOP(OP_REFGEN, 0,
						    (ps[(5) - (10)].val.opval)),
					    OP_ENTERLOOP),
					 (ps[(7) - (10)].val.opval), (ps[(9) - (10)].val.opval), (ps[(10) - (10)].val.opval))
			  );
			  parser->copline = (line_t)(ps[(1) - (10)].val.ival);
			;}
    break;

  case 50:
#line 421 "perly.y"
    {
			  (yyval.opval) = block_end((ps[(5) - (9)].val.ival), newFOROP(
				0, op_lvalue(newUNOP(OP_REFGEN, 0,
						     (ps[(3) - (9)].val.opval)),
					     OP_ENTERLOOP), (ps[(6) - (9)].val.opval), (ps[(8) - (9)].val.opval), (ps[(9) - (9)].val.opval)));
			  parser->copline = (line_t)(ps[(1) - (9)].val.ival);
			;}
    break;

  case 51:
#line 429 "perly.y"
    {
			  (yyval.opval) = block_end((ps[(3) - (7)].val.ival),
				  newFOROP(0, NULL, (ps[(4) - (7)].val.opval), (ps[(6) - (7)].val.opval), (ps[(7) - (7)].val.opval)));
			  parser->copline = (line_t)(ps[(1) - (7)].val.ival);
			;}
    break;

  case 52:
#line 435 "perly.y"
    {
			  /* a block is a loop that happens once */
			  (yyval.opval) = newWHILEOP(0, 1, NULL,
				  NULL, (ps[(1) - (2)].val.opval), (ps[(2) - (2)].val.opval), 0);
			;}
    break;

  case 53:
#line 441 "perly.y"
    {
			  package((ps[(3) - (5)].val.opval));
			  if ((ps[(2) - (5)].val.opval)) {
			      package_version((ps[(2) - (5)].val.opval));
			  }
			;}
    break;

  case 54:
#line 448 "perly.y"
    {
			  /* a block is a loop that happens once */
			  (yyval.opval) = newWHILEOP(0, 1, NULL,
				  NULL, block_end((ps[(5) - (8)].val.ival), (ps[(7) - (8)].val.opval)), NULL, 0);
			  if (parser->copline > (line_t)(ps[(4) - (8)].val.ival))
			      parser->copline = (line_t)(ps[(4) - (8)].val.ival);
			;}
    break;

  case 55:
#line 456 "perly.y"
    {
			  (yyval.opval) = (ps[(1) - (2)].val.opval);
			;}
    break;

  case 56:
#line 460 "perly.y"
    {
			  (yyval.opval) = newLISTOP(OP_DIE, 0, newOP(OP_PUSHMARK, 0),
				newSVOP(OP_CONST, 0, newSVpvs("Unimplemented")));
			;}
    break;

  case 57:
#line 465 "perly.y"
    {
			  (yyval.opval) = NULL;
			  parser->copline = NOLINE;
			;}
    break;

  case 58:
#line 473 "perly.y"
    { OP *list;
			  if ((ps[(2) - (2)].val.opval)) {
			      OP *term = (ps[(2) - (2)].val.opval);
			      list = op_append_elem(OP_LIST, (ps[(1) - (2)].val.opval), term);
			  }
			  else {
			      list = (ps[(1) - (2)].val.opval);
			  }
			  if (parser->copline == NOLINE)
			       parser->copline = CopLINE(PL_curcop)-1;
			  else parser->copline--;
			  (yyval.opval) = newSTATEOP(0, NULL,
					  op_convert_list(OP_FORMLINE, 0, list));
			;}
    break;

  case 59:
#line 490 "perly.y"
    { (yyval.opval) = NULL; ;}
    break;

  case 60:
#line 492 "perly.y"
    { (yyval.opval) = op_unscope((ps[(2) - (3)].val.opval)); ;}
    break;

  case 61:
#line 497 "perly.y"
    { (yyval.opval) = NULL; ;}
    break;

  case 62:
#line 499 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 63:
#line 501 "perly.y"
    { (yyval.opval) = newLOGOP(OP_AND, 0, (ps[(3) - (3)].val.opval), (ps[(1) - (3)].val.opval)); ;}
    break;

  case 64:
#line 503 "perly.y"
    { (yyval.opval) = newLOGOP(OP_OR, 0, (ps[(3) - (3)].val.opval), (ps[(1) - (3)].val.opval)); ;}
    break;

  case 65:
#line 505 "perly.y"
    { (yyval.opval) = newLOOPOP(OPf_PARENS, 1, scalar((ps[(3) - (3)].val.opval)), (ps[(1) - (3)].val.opval)); ;}
    break;

  case 66:
#line 507 "perly.y"
    { (yyval.opval) = newLOOPOP(OPf_PARENS, 1, (ps[(3) - (3)].val.opval), (ps[(1) - (3)].val.opval)); ;}
    break;

  case 67:
#line 509 "perly.y"
    { (yyval.opval) = newFOROP(0, NULL, (ps[(3) - (3)].val.opval), (ps[(1) - (3)].val.opval), NULL);
			  parser->copline = (line_t)(ps[(2) - (3)].val.ival); ;}
    break;

  case 68:
#line 512 "perly.y"
    { (yyval.opval) = newWHENOP((ps[(3) - (3)].val.opval), op_scope((ps[(1) - (3)].val.opval))); ;}
    break;

  case 69:
#line 517 "perly.y"
    { (yyval.opval) = NULL; ;}
    break;

  case 70:
#line 519 "perly.y"
    {
			  ((ps[(2) - (2)].val.opval))->op_flags |= OPf_PARENS;
			  (yyval.opval) = op_scope((ps[(2) - (2)].val.opval));
			;}
    break;

  case 71:
#line 524 "perly.y"
    { parser->copline = (line_t)(ps[(1) - (6)].val.ival);
			    (yyval.opval) = newCONDOP(0,
				newSTATEOP(OPf_SPECIAL,NULL,(ps[(3) - (6)].val.opval)),
				op_scope((ps[(5) - (6)].val.opval)), (ps[(6) - (6)].val.opval));
			  PL_hints |= HINT_BLOCK_SCOPE;
			;}
    break;

  case 72:
#line 534 "perly.y"
    { (yyval.opval) = NULL; ;}
    break;

  case 73:
#line 536 "perly.y"
    { (yyval.opval) = op_scope((ps[(2) - (2)].val.opval)); ;}
    break;

  case 74:
#line 541 "perly.y"
    { (yyval.ival) = (PL_min_intro_pending &&
			    PL_max_intro_pending >=  PL_min_intro_pending);
			  intro_my(); ;}
    break;

  case 75:
#line 547 "perly.y"
    { (yyval.opval) = NULL; ;}
    break;

  case 77:
#line 553 "perly.y"
    { YYSTYPE tmplval;
			  (void)scan_num("1", &tmplval);
			  (yyval.opval) = tmplval.opval; ;}
    break;

  case 79:
#line 561 "perly.y"
    { (yyval.opval) = invert(scalar((ps[(1) - (1)].val.opval))); ;}
    break;

  case 80:
#line 566 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); intro_my(); ;}
    break;

  case 81:
#line 570 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); intro_my(); ;}
    break;

  case 82:
#line 573 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 83:
#line 574 "perly.y"
    { (yyval.opval) = NULL; ;}
    break;

  case 84:
#line 578 "perly.y"
    { (yyval.ival) = start_subparse(FALSE, 0);
			    SAVEFREESV(PL_compcv); ;}
    break;

  case 85:
#line 584 "perly.y"
    { (yyval.ival) = start_subparse(FALSE, CVf_ANON);
			    SAVEFREESV(PL_compcv); ;}
    break;

  case 86:
#line 589 "perly.y"
    { (yyval.ival) = start_subparse(TRUE, 0);
			    SAVEFREESV(PL_compcv); ;}
    break;

  case 89:
#line 600 "perly.y"
    { (yyval.opval) = NULL; ;}
    break;

  case 91:
#line 606 "perly.y"
    { (yyval.opval) = NULL; ;}
    break;

  case 92:
#line 608 "perly.y"
    { (yyval.opval) = (ps[(2) - (2)].val.opval); ;}
    break;

  case 93:
#line 610 "perly.y"
    { (yyval.opval) = NULL; ;}
    break;

  case 94:
#line 615 "perly.y"
    { (yyval.opval) = (ps[(2) - (2)].val.opval); ;}
    break;

  case 95:
#line 617 "perly.y"
    { (yyval.opval) = NULL; ;}
    break;

  case 96:
#line 628 "perly.y"
    { parser->in_my = 0; (yyval.opval) = NULL; ;}
    break;

  case 97:
#line 630 "perly.y"
    { parser->in_my = 0; (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 98:
#line 635 "perly.y"
    { (yyval.ival) = '@'; ;}
    break;

  case 99:
#line 637 "perly.y"
    { (yyval.ival) = '%'; ;}
    break;

  case 100:
#line 641 "perly.y"
    {
                            I32 sigil   = (ps[(1) - (3)].val.ival);
                            OP *var     = (ps[(2) - (3)].val.opval);
                            OP *defexpr = (ps[(3) - (3)].val.opval);

                            if (parser->sig_slurpy)
                                yyerror("Multiple slurpy parameters not allowed");
                            parser->sig_slurpy = (char)sigil;

                            if (defexpr)
                                yyerror("A slurpy parameter may not have "
                                        "a default value");

                            (yyval.opval) = var ? newSTATEOP(0, NULL, var) : NULL;
                        ;}
    break;

  case 101:
#line 660 "perly.y"
    { (yyval.opval) = NULL; ;}
    break;

  case 102:
#line 662 "perly.y"
    { (yyval.opval) = newOP(OP_NULL, 0); ;}
    break;

  case 103:
#line 664 "perly.y"
    { (yyval.opval) = (ps[(2) - (2)].val.opval); ;}
    break;

  case 104:
#line 670 "perly.y"
    {
                            OP *var     = (ps[(2) - (3)].val.opval);
                            OP *defexpr = (ps[(3) - (3)].val.opval);

                            if (parser->sig_slurpy)
                                yyerror("Slurpy parameter not last");

                            parser->sig_elems++;

                            if (defexpr) {
                                parser->sig_optelems++;

                                if (   defexpr->op_type == OP_NULL
                                    && !(defexpr->op_flags & OPf_KIDS))
                                {
                                    /* handle '$=' special case */
                                    if (var)
                                        yyerror("Optional parameter "
                                                    "lacks default expression");
                                    op_free(defexpr);
                                }
                                else { 
                                    /* a normal '=default' expression */ 
                                    OP *defop = (OP*)alloc_LOGOP(OP_ARGDEFELEM,
                                                        defexpr,
                                                        LINKLIST(defexpr));
                                    /* re-purpose op_targ to hold @_ index */
                                    defop->op_targ =
                                        (PADOFFSET)(parser->sig_elems - 1);

                                    if (var) {
                                        var->op_flags |= OPf_STACKED;
                                        (void)op_sibling_splice(var,
                                                        NULL, 0, defop);
                                        scalar(defop);
                                    }
                                    else
                                        var = newUNOP(OP_NULL, 0, defop);

                                    LINKLIST(var);
                                    /* NB: normally the first child of a
                                     * logop is executed before the logop,
                                     * and it pushes a boolean result
                                     * ready for the logop. For ARGDEFELEM,
                                     * the op itself does the boolean
                                     * calculation, so set the first op to
                                     * it instead.
                                     */
                                    var->op_next = defop;
                                    defexpr->op_next = var;
                                }
                            }
                            else {
                                if (parser->sig_optelems)
                                    yyerror("Mandatory parameter "
                                            "follows optional parameter");
                            }

                            (yyval.opval) = var ? newSTATEOP(0, NULL, var) : NULL;
                        ;}
    break;

  case 105:
#line 735 "perly.y"
    { parser->in_my = KEY_sigvar; (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 106:
#line 737 "perly.y"
    { parser->in_my = KEY_sigvar; (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 107:
#line 743 "perly.y"
    { (yyval.opval) = (ps[(1) - (2)].val.opval); ;}
    break;

  case 108:
#line 745 "perly.y"
    {
			  (yyval.opval) = op_append_list(OP_LINESEQ, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval));
			;}
    break;

  case 109:
#line 749 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 110:
#line 754 "perly.y"
    { (yyval.opval) = NULL; ;}
    break;

  case 111:
#line 756 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 112:
#line 760 "perly.y"
    { (yyval.opval) = NULL; ;}
    break;

  case 113:
#line 762 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 114:
#line 766 "perly.y"
    {
                            ENTER;
                            SAVEIV(parser->sig_elems);
                            SAVEIV(parser->sig_optelems);
                            SAVEI8(parser->sig_slurpy);
                            parser->sig_elems    = 0;
                            parser->sig_optelems = 0;
                            parser->sig_slurpy   = 0;
                            parser->in_my        = KEY_sigvar;
                        ;}
    break;

  case 115:
#line 778 "perly.y"
    {
                            OP            *sigops = (ps[(3) - (4)].val.opval);
                            UNOP_AUX_item *aux;
                            OP            *check;

			    if (!FEATURE_SIGNATURES_IS_ENABLED)
			        Perl_croak(aTHX_ "Experimental "
                                    "subroutine signatures not enabled");

                            aux = (UNOP_AUX_item*)PerlMemShared_malloc(
                                sizeof(UNOP_AUX_item) * 3);
                            aux[0].iv = parser->sig_elems;
                            aux[1].iv = parser->sig_optelems;
                            aux[2].iv = parser->sig_slurpy;
                            check = newUNOP_AUX(OP_ARGCHECK, 0, NULL, aux);
                            sigops = op_prepend_elem(OP_LINESEQ, check, sigops);
                            sigops = op_prepend_elem(OP_LINESEQ,
                                                newSTATEOP(0, NULL, NULL),
                                                sigops);
                            /* a nextstate at the end handles context
                             * correctly for an empty sub body */
                            (yyval.opval) = op_append_elem(OP_LINESEQ,
                                                sigops,
                                                newSTATEOP(0, NULL, NULL));

                            parser->in_my = 0;
                            /* tell the toker that attrributes can follow
                             * this sig, but only so that the toker
                             * can skip through any (illegal) trailing
                             * attribute text then give a useful error
                             * message about "attributes before sig",
                             * rather than falling over ina mess at
                             * unrecognised syntax.
                             */
                            parser->expect = XATTRBLOCK;
                            parser->sig_seen = TRUE;
                            LEAVE;
			;}
    break;

  case 116:
#line 819 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 117:
#line 820 "perly.y"
    { (yyval.opval) = NULL; ;}
    break;

  case 118:
#line 826 "perly.y"
    {
			  if (parser->copline > (line_t)(ps[(2) - (4)].val.ival))
			      parser->copline = (line_t)(ps[(2) - (4)].val.ival);
			  (yyval.opval) = block_end((ps[(1) - (4)].val.ival), (ps[(3) - (4)].val.opval));
			;}
    break;

  case 119:
#line 836 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 120:
#line 837 "perly.y"
    { (yyval.opval) = NULL; ;}
    break;

  case 121:
#line 841 "perly.y"
    {
			  if (parser->copline > (line_t)(ps[(3) - (5)].val.ival))
			      parser->copline = (line_t)(ps[(3) - (5)].val.ival);
			  (yyval.opval) = block_end((ps[(1) - (5)].val.ival),
				op_append_list(OP_LINESEQ, (ps[(2) - (5)].val.opval), (ps[(4) - (5)].val.opval)));
 			;}
    break;

  case 122:
#line 852 "perly.y"
    { (yyval.opval) = newLOGOP(OP_AND, 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval)); ;}
    break;

  case 123:
#line 854 "perly.y"
    { (yyval.opval) = newLOGOP((ps[(2) - (3)].val.ival), 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval)); ;}
    break;

  case 124:
#line 856 "perly.y"
    { (yyval.opval) = newLOGOP(OP_DOR, 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval)); ;}
    break;

  case 126:
#line 862 "perly.y"
    { (yyval.opval) = (ps[(1) - (2)].val.opval); ;}
    break;

  case 127:
#line 864 "perly.y"
    {
			  OP* term = (ps[(3) - (3)].val.opval);
			  (yyval.opval) = op_append_elem(OP_LIST, (ps[(1) - (3)].val.opval), term);
			;}
    break;

  case 129:
#line 873 "perly.y"
    { (yyval.opval) = op_convert_list((ps[(1) - (3)].val.ival), OPf_STACKED,
				op_prepend_elem(OP_LIST, newGVREF((ps[(1) - (3)].val.ival),(ps[(2) - (3)].val.opval)), (ps[(3) - (3)].val.opval)) );
			;}
    break;

  case 130:
#line 877 "perly.y"
    { (yyval.opval) = op_convert_list((ps[(1) - (5)].val.ival), OPf_STACKED,
				op_prepend_elem(OP_LIST, newGVREF((ps[(1) - (5)].val.ival),(ps[(3) - (5)].val.opval)), (ps[(4) - (5)].val.opval)) );
			;}
    break;

  case 131:
#line 881 "perly.y"
    { (yyval.opval) = op_convert_list(OP_ENTERSUB, OPf_STACKED,
				op_append_elem(OP_LIST,
				    op_prepend_elem(OP_LIST, scalar((ps[(1) - (6)].val.opval)), (ps[(5) - (6)].val.opval)),
				    newMETHOP(OP_METHOD, 0, (ps[(3) - (6)].val.opval))));
			;}
    break;

  case 132:
#line 887 "perly.y"
    { (yyval.opval) = op_convert_list(OP_ENTERSUB, OPf_STACKED,
				op_append_elem(OP_LIST, scalar((ps[(1) - (3)].val.opval)),
				    newMETHOP(OP_METHOD, 0, (ps[(3) - (3)].val.opval))));
			;}
    break;

  case 133:
#line 892 "perly.y"
    { (yyval.opval) = op_convert_list(OP_ENTERSUB, OPf_STACKED,
				op_append_elem(OP_LIST,
				    op_prepend_elem(OP_LIST, (ps[(2) - (3)].val.opval), (ps[(3) - (3)].val.opval)),
				    newMETHOP(OP_METHOD, 0, (ps[(1) - (3)].val.opval))));
			;}
    break;

  case 134:
#line 898 "perly.y"
    { (yyval.opval) = op_convert_list(OP_ENTERSUB, OPf_STACKED,
				op_append_elem(OP_LIST,
				    op_prepend_elem(OP_LIST, (ps[(2) - (5)].val.opval), (ps[(4) - (5)].val.opval)),
				    newMETHOP(OP_METHOD, 0, (ps[(1) - (5)].val.opval))));
			;}
    break;

  case 135:
#line 904 "perly.y"
    { (yyval.opval) = op_convert_list((ps[(1) - (2)].val.ival), 0, (ps[(2) - (2)].val.opval)); ;}
    break;

  case 136:
#line 906 "perly.y"
    { (yyval.opval) = op_convert_list((ps[(1) - (4)].val.ival), 0, (ps[(3) - (4)].val.opval)); ;}
    break;

  case 137:
#line 908 "perly.y"
    { SvREFCNT_inc_simple_void(PL_compcv);
			  (yyval.opval) = newANONATTRSUB((ps[(2) - (3)].val.ival), 0, NULL, (ps[(3) - (3)].val.opval)); ;}
    break;

  case 138:
#line 911 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				 op_append_elem(OP_LIST,
				   op_prepend_elem(OP_LIST, (ps[(4) - (5)].val.opval), (ps[(5) - (5)].val.opval)), (ps[(1) - (5)].val.opval)));
			;}
    break;

  case 141:
#line 926 "perly.y"
    { (yyval.opval) = newBINOP(OP_GELEM, 0, (ps[(1) - (5)].val.opval), scalar((ps[(3) - (5)].val.opval))); ;}
    break;

  case 142:
#line 928 "perly.y"
    { (yyval.opval) = newBINOP(OP_AELEM, 0, oopsAV((ps[(1) - (4)].val.opval)), scalar((ps[(3) - (4)].val.opval)));
			;}
    break;

  case 143:
#line 931 "perly.y"
    { (yyval.opval) = newBINOP(OP_AELEM, 0,
					ref(newAVREF((ps[(1) - (5)].val.opval)),OP_RV2AV),
					scalar((ps[(4) - (5)].val.opval)));
			;}
    break;

  case 144:
#line 936 "perly.y"
    { (yyval.opval) = newBINOP(OP_AELEM, 0,
					ref(newAVREF((ps[(1) - (4)].val.opval)),OP_RV2AV),
					scalar((ps[(3) - (4)].val.opval)));
			;}
    break;

  case 145:
#line 941 "perly.y"
    { (yyval.opval) = newBINOP(OP_HELEM, 0, oopsHV((ps[(1) - (5)].val.opval)), jmaybe((ps[(3) - (5)].val.opval)));
			;}
    break;

  case 146:
#line 944 "perly.y"
    { (yyval.opval) = newBINOP(OP_HELEM, 0,
					ref(newHVREF((ps[(1) - (6)].val.opval)),OP_RV2HV),
					jmaybe((ps[(4) - (6)].val.opval))); ;}
    break;

  case 147:
#line 948 "perly.y"
    { (yyval.opval) = newBINOP(OP_HELEM, 0,
					ref(newHVREF((ps[(1) - (5)].val.opval)),OP_RV2HV),
					jmaybe((ps[(3) - (5)].val.opval))); ;}
    break;

  case 148:
#line 952 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				   newCVREF(0, scalar((ps[(1) - (4)].val.opval))));
			  if (parser->expect == XBLOCK)
			      parser->expect = XOPERATOR;
			;}
    break;

  case 149:
#line 958 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				   op_append_elem(OP_LIST, (ps[(4) - (5)].val.opval),
				       newCVREF(0, scalar((ps[(1) - (5)].val.opval)))));
			  if (parser->expect == XBLOCK)
			      parser->expect = XOPERATOR;
			;}
    break;

  case 150:
#line 966 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				   op_append_elem(OP_LIST, (ps[(3) - (4)].val.opval),
					       newCVREF(0, scalar((ps[(1) - (4)].val.opval)))));
			  if (parser->expect == XBLOCK)
			      parser->expect = XOPERATOR;
			;}
    break;

  case 151:
#line 973 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				   newCVREF(0, scalar((ps[(1) - (3)].val.opval))));
			  if (parser->expect == XBLOCK)
			      parser->expect = XOPERATOR;
			;}
    break;

  case 152:
#line 979 "perly.y"
    { (yyval.opval) = newSLICEOP(0, (ps[(5) - (6)].val.opval), (ps[(2) - (6)].val.opval)); ;}
    break;

  case 153:
#line 981 "perly.y"
    { (yyval.opval) = newSLICEOP(0, (ps[(3) - (4)].val.opval), (ps[(1) - (4)].val.opval)); ;}
    break;

  case 154:
#line 983 "perly.y"
    { (yyval.opval) = newSLICEOP(0, (ps[(4) - (5)].val.opval), NULL); ;}
    break;

  case 155:
#line 988 "perly.y"
    { (yyval.opval) = newASSIGNOP(OPf_STACKED, (ps[(1) - (3)].val.opval), (ps[(2) - (3)].val.ival), (ps[(3) - (3)].val.opval)); ;}
    break;

  case 156:
#line 990 "perly.y"
    { (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); ;}
    break;

  case 157:
#line 992 "perly.y"
    {   if ((ps[(2) - (3)].val.ival) != OP_REPEAT)
				scalar((ps[(1) - (3)].val.opval));
			    (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, (ps[(1) - (3)].val.opval), scalar((ps[(3) - (3)].val.opval)));
			;}
    break;

  case 158:
#line 997 "perly.y"
    { (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); ;}
    break;

  case 159:
#line 999 "perly.y"
    { (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); ;}
    break;

  case 160:
#line 1001 "perly.y"
    { (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); ;}
    break;

  case 161:
#line 1003 "perly.y"
    { (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); ;}
    break;

  case 162:
#line 1005 "perly.y"
    { (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); ;}
    break;

  case 163:
#line 1007 "perly.y"
    { (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); ;}
    break;

  case 164:
#line 1009 "perly.y"
    { (yyval.opval) = newRANGE((ps[(2) - (3)].val.ival), scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); ;}
    break;

  case 165:
#line 1011 "perly.y"
    { (yyval.opval) = newLOGOP(OP_AND, 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval)); ;}
    break;

  case 166:
#line 1013 "perly.y"
    { (yyval.opval) = newLOGOP(OP_OR, 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval)); ;}
    break;

  case 167:
#line 1015 "perly.y"
    { (yyval.opval) = newLOGOP(OP_DOR, 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval)); ;}
    break;

  case 168:
#line 1017 "perly.y"
    { (yyval.opval) = bind_match((ps[(2) - (3)].val.ival), (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval)); ;}
    break;

  case 169:
#line 1022 "perly.y"
    { (yyval.opval) = newUNOP(OP_NEGATE, 0, scalar((ps[(2) - (2)].val.opval))); ;}
    break;

  case 170:
#line 1024 "perly.y"
    { (yyval.opval) = (ps[(2) - (2)].val.opval); ;}
    break;

  case 171:
#line 1027 "perly.y"
    { (yyval.opval) = newUNOP(OP_NOT, 0, scalar((ps[(2) - (2)].val.opval))); ;}
    break;

  case 172:
#line 1029 "perly.y"
    { (yyval.opval) = newUNOP((ps[(1) - (2)].val.ival), 0, scalar((ps[(2) - (2)].val.opval))); ;}
    break;

  case 173:
#line 1031 "perly.y"
    { (yyval.opval) = newUNOP(OP_POSTINC, 0,
					op_lvalue(scalar((ps[(1) - (2)].val.opval)), OP_POSTINC)); ;}
    break;

  case 174:
#line 1034 "perly.y"
    { (yyval.opval) = newUNOP(OP_POSTDEC, 0,
					op_lvalue(scalar((ps[(1) - (2)].val.opval)), OP_POSTDEC));;}
    break;

  case 175:
#line 1037 "perly.y"
    { (yyval.opval) = op_convert_list(OP_JOIN, 0,
				       op_append_elem(
					OP_LIST,
					newSVREF(scalar(
					    newSVOP(OP_CONST,0,
						    newSVpvs("\""))
					)),
					(ps[(1) - (2)].val.opval)
				       ));
			;}
    break;

  case 176:
#line 1048 "perly.y"
    { (yyval.opval) = newUNOP(OP_PREINC, 0,
					op_lvalue(scalar((ps[(2) - (2)].val.opval)), OP_PREINC)); ;}
    break;

  case 177:
#line 1051 "perly.y"
    { (yyval.opval) = newUNOP(OP_PREDEC, 0,
					op_lvalue(scalar((ps[(2) - (2)].val.opval)), OP_PREDEC)); ;}
    break;

  case 178:
#line 1058 "perly.y"
    { (yyval.opval) = newANONLIST((ps[(2) - (3)].val.opval)); ;}
    break;

  case 179:
#line 1060 "perly.y"
    { (yyval.opval) = newANONLIST(NULL);;}
    break;

  case 180:
#line 1062 "perly.y"
    { (yyval.opval) = newANONHASH((ps[(2) - (4)].val.opval)); ;}
    break;

  case 181:
#line 1064 "perly.y"
    { (yyval.opval) = newANONHASH(NULL); ;}
    break;

  case 182:
#line 1066 "perly.y"
    { SvREFCNT_inc_simple_void(PL_compcv);
			  (yyval.opval) = newANONATTRSUB((ps[(2) - (5)].val.ival), (ps[(3) - (5)].val.opval), (ps[(4) - (5)].val.opval), (ps[(5) - (5)].val.opval)); ;}
    break;

  case 183:
#line 1069 "perly.y"
    { SvREFCNT_inc_simple_void(PL_compcv);
			  (yyval.opval) = newANONATTRSUB((ps[(2) - (4)].val.ival), NULL, (ps[(3) - (4)].val.opval), (ps[(4) - (4)].val.opval)); ;}
    break;

  case 184:
#line 1075 "perly.y"
    { (yyval.opval) = dofile((ps[(2) - (2)].val.opval), (ps[(1) - (2)].val.ival));;}
    break;

  case 185:
#line 1077 "perly.y"
    { (yyval.opval) = newUNOP(OP_NULL, OPf_SPECIAL, op_scope((ps[(2) - (2)].val.opval)));;}
    break;

  case 190:
#line 1085 "perly.y"
    { (yyval.opval) = newCONDOP(0, (ps[(1) - (5)].val.opval), (ps[(3) - (5)].val.opval), (ps[(5) - (5)].val.opval)); ;}
    break;

  case 191:
#line 1087 "perly.y"
    { (yyval.opval) = newUNOP(OP_REFGEN, 0, (ps[(2) - (2)].val.opval)); ;}
    break;

  case 192:
#line 1089 "perly.y"
    { (yyval.opval) = newUNOP(OP_REFGEN, 0, localize((ps[(3) - (3)].val.opval),1)); ;}
    break;

  case 193:
#line 1091 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 194:
#line 1093 "perly.y"
    { (yyval.opval) = localize((ps[(2) - (2)].val.opval),0); ;}
    break;

  case 195:
#line 1095 "perly.y"
    { (yyval.opval) = sawparens((ps[(2) - (3)].val.opval)); ;}
    break;

  case 196:
#line 1097 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 197:
#line 1099 "perly.y"
    { (yyval.opval) = sawparens(newNULLLIST()); ;}
    break;

  case 198:
#line 1101 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 199:
#line 1103 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 200:
#line 1105 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 201:
#line 1107 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 202:
#line 1109 "perly.y"
    { (yyval.opval) = newUNOP(OP_AV2ARYLEN, 0, ref((ps[(1) - (1)].val.opval), OP_AV2ARYLEN));;}
    break;

  case 203:
#line 1111 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 204:
#line 1113 "perly.y"
    { (yyval.opval) = op_prepend_elem(OP_ASLICE,
				newOP(OP_PUSHMARK, 0),
				    newLISTOP(OP_ASLICE, 0,
					list((ps[(3) - (4)].val.opval)),
					ref((ps[(1) - (4)].val.opval), OP_ASLICE)));
			  if ((yyval.opval) && (ps[(1) - (4)].val.opval))
			      (yyval.opval)->op_private |=
				  (ps[(1) - (4)].val.opval)->op_private & OPpSLICEWARNING;
			;}
    break;

  case 205:
#line 1123 "perly.y"
    { (yyval.opval) = op_prepend_elem(OP_KVASLICE,
				newOP(OP_PUSHMARK, 0),
				    newLISTOP(OP_KVASLICE, 0,
					list((ps[(3) - (4)].val.opval)),
					ref(oopsAV((ps[(1) - (4)].val.opval)), OP_KVASLICE)));
			  if ((yyval.opval) && (ps[(1) - (4)].val.opval))
			      (yyval.opval)->op_private |=
				  (ps[(1) - (4)].val.opval)->op_private & OPpSLICEWARNING;
			;}
    break;

  case 206:
#line 1133 "perly.y"
    { (yyval.opval) = op_prepend_elem(OP_HSLICE,
				newOP(OP_PUSHMARK, 0),
				    newLISTOP(OP_HSLICE, 0,
					list((ps[(3) - (5)].val.opval)),
					ref(oopsHV((ps[(1) - (5)].val.opval)), OP_HSLICE)));
			  if ((yyval.opval) && (ps[(1) - (5)].val.opval))
			      (yyval.opval)->op_private |=
				  (ps[(1) - (5)].val.opval)->op_private & OPpSLICEWARNING;
			;}
    break;

  case 207:
#line 1143 "perly.y"
    { (yyval.opval) = op_prepend_elem(OP_KVHSLICE,
				newOP(OP_PUSHMARK, 0),
				    newLISTOP(OP_KVHSLICE, 0,
					list((ps[(3) - (5)].val.opval)),
					ref((ps[(1) - (5)].val.opval), OP_KVHSLICE)));
			  if ((yyval.opval) && (ps[(1) - (5)].val.opval))
			      (yyval.opval)->op_private |=
				  (ps[(1) - (5)].val.opval)->op_private & OPpSLICEWARNING;
			;}
    break;

  case 208:
#line 1153 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 209:
#line 1155 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, 0, scalar((ps[(1) - (1)].val.opval))); ;}
    break;

  case 210:
#line 1157 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED, scalar((ps[(1) - (3)].val.opval)));
			;}
    break;

  case 211:
#line 1160 "perly.y"
    {
			  (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				op_append_elem(OP_LIST, (ps[(3) - (4)].val.opval), scalar((ps[(1) - (4)].val.opval))));
			;}
    break;

  case 212:
#line 1165 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
			    op_append_elem(OP_LIST, (ps[(3) - (3)].val.opval), scalar((ps[(2) - (3)].val.opval))));
			;}
    break;

  case 213:
#line 1169 "perly.y"
    { (yyval.opval) = newSVREF((ps[(1) - (4)].val.opval)); ;}
    break;

  case 214:
#line 1171 "perly.y"
    { (yyval.opval) = newAVREF((ps[(1) - (4)].val.opval)); ;}
    break;

  case 215:
#line 1173 "perly.y"
    { (yyval.opval) = newHVREF((ps[(1) - (4)].val.opval)); ;}
    break;

  case 216:
#line 1175 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, 0,
				       scalar(newCVREF((ps[(3) - (4)].val.ival),(ps[(1) - (4)].val.opval)))); ;}
    break;

  case 217:
#line 1178 "perly.y"
    { (yyval.opval) = newGVREF(0,(ps[(1) - (4)].val.opval)); ;}
    break;

  case 218:
#line 1180 "perly.y"
    { (yyval.opval) = newOP((ps[(1) - (1)].val.ival), OPf_SPECIAL);
			    PL_hints |= HINT_BLOCK_SCOPE; ;}
    break;

  case 219:
#line 1183 "perly.y"
    { (yyval.opval) = newLOOPEX((ps[(1) - (2)].val.ival),(ps[(2) - (2)].val.opval)); ;}
    break;

  case 220:
#line 1185 "perly.y"
    { (yyval.opval) = newUNOP(OP_NOT, 0, scalar((ps[(2) - (2)].val.opval))); ;}
    break;

  case 221:
#line 1187 "perly.y"
    { (yyval.opval) = newOP((ps[(1) - (1)].val.ival), 0); ;}
    break;

  case 222:
#line 1189 "perly.y"
    { (yyval.opval) = newUNOP((ps[(1) - (2)].val.ival), 0, (ps[(2) - (2)].val.opval)); ;}
    break;

  case 223:
#line 1191 "perly.y"
    { (yyval.opval) = newUNOP((ps[(1) - (2)].val.ival), 0, (ps[(2) - (2)].val.opval)); ;}
    break;

  case 224:
#line 1193 "perly.y"
    { (yyval.opval) = newOP(OP_REQUIRE, (ps[(1) - (1)].val.ival) ? OPf_SPECIAL : 0); ;}
    break;

  case 225:
#line 1195 "perly.y"
    { (yyval.opval) = newUNOP(OP_REQUIRE, (ps[(1) - (2)].val.ival) ? OPf_SPECIAL : 0, (ps[(2) - (2)].val.opval)); ;}
    break;

  case 226:
#line 1197 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED, scalar((ps[(1) - (1)].val.opval))); ;}
    break;

  case 227:
#line 1199 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
			    op_append_elem(OP_LIST, (ps[(2) - (2)].val.opval), scalar((ps[(1) - (2)].val.opval)))); ;}
    break;

  case 228:
#line 1202 "perly.y"
    { (yyval.opval) = newOP((ps[(1) - (1)].val.ival), 0); ;}
    break;

  case 229:
#line 1204 "perly.y"
    { (yyval.opval) = newOP((ps[(1) - (3)].val.ival), 0);;}
    break;

  case 230:
#line 1206 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 231:
#line 1208 "perly.y"
    { (yyval.opval) = (ps[(1) - (3)].val.opval); ;}
    break;

  case 232:
#line 1210 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED, scalar((ps[(1) - (1)].val.opval))); ;}
    break;

  case 233:
#line 1212 "perly.y"
    { (yyval.opval) = ((ps[(1) - (3)].val.ival) == OP_NOT)
                          ? newUNOP((ps[(1) - (3)].val.ival), 0, newSVOP(OP_CONST, 0, newSViv(0)))
                          : newOP((ps[(1) - (3)].val.ival), OPf_SPECIAL); ;}
    break;

  case 234:
#line 1216 "perly.y"
    { (yyval.opval) = newUNOP((ps[(1) - (4)].val.ival), 0, (ps[(3) - (4)].val.opval)); ;}
    break;

  case 235:
#line 1218 "perly.y"
    {
			    if (   (ps[(1) - (1)].val.opval)->op_type != OP_TRANS
			        && (ps[(1) - (1)].val.opval)->op_type != OP_TRANSR
				&& (((PMOP*)(ps[(1) - (1)].val.opval))->op_pmflags & PMf_HAS_CV))
			    {
				(yyval.ival) = start_subparse(FALSE, CVf_ANON);
				SAVEFREESV(PL_compcv);
			    } else
				(yyval.ival) = 0;
			;}
    break;

  case 236:
#line 1229 "perly.y"
    { (yyval.opval) = pmruntime((ps[(1) - (6)].val.opval), (ps[(4) - (6)].val.opval), (ps[(5) - (6)].val.opval), 1, (ps[(2) - (6)].val.ival)); ;}
    break;

  case 240:
#line 1237 "perly.y"
    { (yyval.opval) = my_attrs((ps[(2) - (3)].val.opval),(ps[(3) - (3)].val.opval)); ;}
    break;

  case 241:
#line 1239 "perly.y"
    { (yyval.opval) = localize((ps[(2) - (2)].val.opval),1); ;}
    break;

  case 242:
#line 1241 "perly.y"
    { (yyval.opval) = newUNOP(OP_REFGEN, 0, my_attrs((ps[(3) - (4)].val.opval),(ps[(4) - (4)].val.opval))); ;}
    break;

  case 243:
#line 1246 "perly.y"
    { (yyval.opval) = sawparens((ps[(2) - (3)].val.opval)); ;}
    break;

  case 244:
#line 1248 "perly.y"
    { (yyval.opval) = sawparens(newNULLLIST()); ;}
    break;

  case 245:
#line 1251 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 246:
#line 1253 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 247:
#line 1255 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 248:
#line 1260 "perly.y"
    { (yyval.opval) = NULL; ;}
    break;

  case 249:
#line 1262 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 250:
#line 1266 "perly.y"
    { (yyval.opval) = NULL; ;}
    break;

  case 251:
#line 1268 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 252:
#line 1272 "perly.y"
    { (yyval.opval) = NULL; ;}
    break;

  case 253:
#line 1274 "perly.y"
    { (yyval.opval) = (ps[(2) - (2)].val.opval); ;}
    break;

  case 254:
#line 1280 "perly.y"
    { parser->in_my = 0; (yyval.opval) = my((ps[(1) - (1)].val.opval)); ;}
    break;

  case 262:
#line 1297 "perly.y"
    { (yyval.opval) = newCVREF((ps[(1) - (2)].val.ival),(ps[(2) - (2)].val.opval)); ;}
    break;

  case 263:
#line 1301 "perly.y"
    { (yyval.opval) = newSVREF((ps[(2) - (2)].val.opval)); ;}
    break;

  case 264:
#line 1305 "perly.y"
    { (yyval.opval) = newAVREF((ps[(2) - (2)].val.opval));
			  if ((yyval.opval)) (yyval.opval)->op_private |= (ps[(1) - (2)].val.ival);
			;}
    break;

  case 265:
#line 1311 "perly.y"
    { (yyval.opval) = newHVREF((ps[(2) - (2)].val.opval));
			  if ((yyval.opval)) (yyval.opval)->op_private |= (ps[(1) - (2)].val.ival);
			;}
    break;

  case 266:
#line 1317 "perly.y"
    { (yyval.opval) = newAVREF((ps[(2) - (2)].val.opval)); ;}
    break;

  case 267:
#line 1319 "perly.y"
    { (yyval.opval) = newAVREF((ps[(1) - (4)].val.opval)); ;}
    break;

  case 268:
#line 1323 "perly.y"
    { (yyval.opval) = newGVREF(0,(ps[(2) - (2)].val.opval)); ;}
    break;

  case 270:
#line 1328 "perly.y"
    { (yyval.opval) = newAVREF((ps[(1) - (3)].val.opval)); ;}
    break;

  case 272:
#line 1333 "perly.y"
    { (yyval.opval) = newHVREF((ps[(1) - (3)].val.opval)); ;}
    break;

  case 274:
#line 1338 "perly.y"
    { (yyval.opval) = newGVREF(0,(ps[(1) - (3)].val.opval)); ;}
    break;

  case 275:
#line 1343 "perly.y"
    { (yyval.opval) = scalar((ps[(1) - (1)].val.opval)); ;}
    break;

  case 276:
#line 1345 "perly.y"
    { (yyval.opval) = scalar((ps[(1) - (1)].val.opval)); ;}
    break;

  case 277:
#line 1347 "perly.y"
    { (yyval.opval) = op_scope((ps[(1) - (1)].val.opval)); ;}
    break;

  case 278:
#line 1350 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;


/* Line 1267 of yacc.c.  */

      default: break;
    

/* Generated from:
 * 100c5d160b91827f82cc671e3b705fb27948282fcc3e1fb7219f9ddee9f53c22 perly.y
 * b6fae5748f9bef6db4740aa5e122b84ac5181852d42474d0ecad621fa4253306 regen_perly.pl
 * ex: set ro: */
